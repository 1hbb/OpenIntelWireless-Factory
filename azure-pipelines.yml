# Xcode
# Build, test, and archive an Xcode workspace on macOS.
# Add steps that install certificates, test, sign, and distribute an app, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/xcode

trigger: none
pr: none

schedules:
- cron: "0 */8 * * *"
  displayName: Schedule Try Demo
  branches:
    include:
    - master
  always: true

pool:
  vmImage: 'macos-latest'

steps:

- task: Bash@3
  displayName: Clone Heliport & Install pods
  inputs:
    targetType: 'inline'
    script: |
      #!/bin/bash
      DIR=$PWD
      mkdir "HeliPort-itlwm-itlwmx"
      git clone https://github.com/OpenIntelWireless/HeliPort.git
      cd HeliPort
      pod install
      brew install swiftlint

- task: Bash@3
  displayName: Build HeliPort
  inputs:
    targetType: 'inline'
    script: |
      #!/bin/bash
      DIR=$PWD
      cd HeliPort
      xcodebuild -workspace HeliPort.xcworkspace -scheme HeliPort -sdk macosx -configuration Release archive -archivePath $PWD/build/HeliPort.xcarchive
      cd $PWD/build/HeliPort.xcarchive/Products/Applications/
      pwd
      mv HeliPort.app $DIR/HeliPort-itlwm-itlwmx
      cd $DIR/HeliPort
      [ -e changelog.md  ] && rm changelog.md
      echo "# Release Notes" >> changelog.md
      echo "## Latest HeliPort Changes " >> $DIR/changelog.md
      echo "*" "$(git log -n 1 --skip 0  --pretty=%B)" >> $DIR/changelog.md
      echo "*" "$(git log -n 1 --skip 1  --pretty=%B)" >> $DIR/changelog.md
      echo "*" "$(git log -n 1 --skip 2  --pretty=%B)" >> $DIR/changelog.md


- task: Bash@3
  displayName: Get Latest Changes From HeliPort
  inputs:
    targetType: 'inline'
    script: |
      #!/bin/bash
      DIR=$PWD
      cd HeliPort
      [ -e $DIR/changelog.md  ] && rm $DIR/changelog.md
      echo "# Release Notes" >> $DIR/changelog.md
      echo "## Latest HeliPort Changes " >> $DIR/changelog.md
      echo "*" "$(git log -n 1 --skip 0  --pretty=%B)" >> $DIR/changelog.md
      echo "*" "$(git log -n 1 --skip 1  --pretty=%B)" >> $DIR/changelog.md
      echo "*" "$(git log -n 1 --skip 2  --pretty=%B)" >> $DIR/changelog.md


- task: Bash@3
  displayName: Clone itlwm
  inputs:
    targetType: 'inline'
    script: |
      #!/bin/bash
      DIR=$PWD
      ls
      git clone https://github.com/OpenIntelWireless/itlwm.git

- task: Bash@3
  displayName: Build itlwm
  inputs:
    targetType: 'inline'
    script: |
      #!/bin/bash
      DIR=$PWD
      cd itlwm
      xcodebuild -project itlwm.xcodeproj -target fwgen -configuration Release -sdk macosx
      xcodebuild -project itlwm.xcodeproj -target fw_genx -configuration Release -sdk macosx
      xcodebuild -project itlwm.xcodeproj -target itlwm -configuration Release -sdk macosx
      xcodebuild -project itlwm.xcodeproj -target itlwmx -configuration Release -sdk macosx
      cd build/Release
      ls
      mv itlwm.kext $DIR/HeliPort-itlwm-itlwmx
      mv itlwmx.kext $DIR/HeliPort-itlwm-itlwmx

- task: Bash@3
  displayName: Get Latest Changes From itlwm
  inputs:
    targetType: 'inline'
    script: |
      #!/bin/bash
      DIR=$PWD
      cd itlwm
      echo "## Latest itlwm Changes" >> $DIR/changelog.md
      echo "*" "$(git log -n 1 --skip 0  --pretty=%B)" >> $DIR/changelog.md
      echo "*" "$(git log -n 1 --skip 1  --pretty=%B)" >> $DIR/changelog.md
      echo "*" "$(git log -n 1 --skip 2  --pretty=%B)" >> $DIR/changelog.md

- task: Bash@3
  displayName: Set BuildDate variable for release tag
  inputs:
    targetType: 'inline'
    script: |
      #!/bin/bash
      BD="$(date +"%Y-%m-%d")" # Build Date
      echo "##vso[task.setvariable variable=BuildDate]$BD"

- task: Bash@3
  displayName: Prepare Release Zip File
  inputs:
    targetType: 'inline'
    script: |
      #!/bin/bash
      zip -r HeliPort-itlwm-itlwmx.zip HeliPort-itlwm-itlwmx


- task: GitHubRelease@1
  displayName: Github Release Assets
  inputs:
    gitHubConnection: 'github.com_1hbb'
    repositoryName: '$(Build.Repository.Name)'
    action: 'edit'
    target: '$(Build.SourceVersion)'
    tag: '$(BuildDate)'
    title: '$(BuildDate)'
    releaseNotesFilePath: 'changelog.md'
    assets: '*.zip'
    assetUploadMode: 'replace'
    isPreRelease: true
    changeLogCompareToRelease: 'lastNonDraftRelease'
    addChangeLog: false
